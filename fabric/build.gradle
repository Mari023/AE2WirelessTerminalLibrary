plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    modCompileOnly ("dev.emi:trinkets:${rootProject.trinkets_version}") { transitive false }
    modCompileOnly ("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
    //modRuntimeOnly "dev.emi:trinkets:${rootProject.trinkets_version}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}"
    modRuntimeOnly("me.shedaniel.cloth:cloth-config-fabric:${project.cloth}")
    modApi("com.terraformersmc:modmenu:${project.mod_menu_version}")
    modImplementation ("appeng:appliedenergistics2-fabric:${rootProject.ae2_fabric_version}") {
        exclude group: 'me.shedaniel'
    }
    modRuntimeOnly("dev.architectury:architectury-fabric:${rootProject.architectury_version}")
}

processResources {
    inputs.property "version", project.version
    inputs.property "ae2_version", rootProject.ae2_fabric_version

    filesMatching("fabric.mod.json") {
        expand "version": project.version, "ae2_version": rootProject.ae2_fabric_version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
